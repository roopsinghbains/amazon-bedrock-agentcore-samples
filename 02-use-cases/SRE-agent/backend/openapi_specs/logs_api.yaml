openapi: 3.0.3
info:
  title: Application Logs API
  version: 1.0.0
  description: API for accessing and analyzing application logs
servers:
  - url: https://your-backend-domain.com:8012
    description: Remote development server for Logs API
  - url: https://localhost:8012
    description: Local development server for Logs API

security:
  - apiKey: []

components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication
paths:
  /logs/search:
    get:
      operationId: search_logs
      summary: Search logs by pattern/timeframe
      parameters:
        - name: pattern
          in: query
          required: true
          schema:
            type: string
          description: Search pattern or keyword
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
          description: Start time for log search
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
          description: End time for log search
        - name: log_level
          in: query
          schema:
            type: string
            enum: [ERROR, WARN, INFO, DEBUG]
          description: Filter by log level
      responses:
        '200':
          description: Log search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                          description: Log timestamp
                          example: "2024-01-15T14:23:46.567Z"
                        level:
                          type: string
                          description: Log level
                          enum: [ERROR, WARN, INFO, DEBUG]
                          example: "ERROR"
                        message:
                          type: string
                          description: Log message
                          example: "Database connection timeout after 5000ms"
                        service:
                          type: string
                          description: Service name
                          example: "web-service"
                        correlation_id:
                          type: string
                          description: Request correlation ID
                          example: "req-123456"
                example:
                  logs:
                    - timestamp: "2024-01-15T14:23:46.567Z"
                      level: "ERROR"
                      message: "Database connection timeout after 5000ms"
                      service: "web-service"
                      correlation_id: "req-123456"
        '400':
          description: Bad request - invalid search parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Pattern parameter is required"
        '401':
          description: Unauthorized - invalid or missing API key
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Invalid or missing API key"
        '422':
          description: Unprocessable entity - invalid timestamp format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid timestamp format. Use ISO 8601 format."
        '429':
          description: Too many requests - rate limit exceeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Rate limit exceeded. Try again later."
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to process log search request"
  /logs/errors:
    get:
      operationId: get_error_logs
      summary: Retrieve error-specific entries
      parameters:
        - name: since
          in: query
          schema:
            type: string
            format: date-time
          description: Get errors since this timestamp
        - name: service
          in: query
          schema:
            type: string
          description: Filter by service name
      responses:
        '200':
          description: Error log entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                        level:
                          type: string
                        service:
                          type: string
                        message:
                          type: string
                        stack_trace:
                          type: string
                        correlation_id:
                          type: string
  /logs/patterns:
    get:
      operationId: analyze_log_patterns
      summary: Identify recurring issues
      parameters:
        - name: time_window
          in: query
          schema:
            type: string
            enum: [1h, 6h, 24h, 7d]
          description: Time window for pattern analysis
        - name: min_occurrences
          in: query
          schema:
            type: integer
            minimum: 1
            default: 5
          description: Minimum occurrences to be considered a pattern
      responses:
        '200':
          description: Log patterns analysis
          content:
            application/json:
              schema:
                type: object
                properties:
                  patterns:
                    type: array
                    items:
                      type: object
                      properties:
                        pattern:
                          type: string
                        count:
                          type: integer
                        first_seen:
                          type: string
                          format: date-time
                        last_seen:
                          type: string
                          format: date-time
                        severity:
                          type: string
  /logs/recent:
    get:
      operationId: get_recent_logs
      summary: Fetch latest log entries
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Number of recent logs to return
        - name: service
          in: query
          schema:
            type: string
          description: Filter by service name
      responses:
        '200':
          description: Recent log entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                        level:
                          type: string
                        message:
                          type: string
                        service:
                          type: string
  /logs/count:
    get:
      operationId: count_log_events
      summary: Count occurrences of specific events
      parameters:
        - name: event_type
          in: query
          required: true
          schema:
            type: string
          description: Type of event to count
        - name: time_window
          in: query
          schema:
            type: string
            enum: [1h, 6h, 24h, 7d]
          description: Time window for counting
        - name: group_by
          in: query
          schema:
            type: string
            enum: [service, level, hour]
          description: Group results by this field
      responses:
        '200':
          description: Event count results
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  counts:
                    type: array
                    items:
                      type: object
                      properties:
                        group:
                          type: string
                        count:
                          type: integer
                        percentage:
                          type: number