{
  "recovery_procedures": [
    {
      "id": "web-service-recovery",
      "service": "web-service",
      "recovery_steps": [
        {
          "step": 1,
          "action": "Check service health",
          "command": "kubectl get pods -l app=web-app",
          "expected_result": "All pods should be in Running state"
        },
        {
          "step": 2,
          "action": "Restart unhealthy pods",
          "command": "kubectl delete pod <unhealthy-pod-name>",
          "expected_result": "New pod should start and become ready"
        },
        {
          "step": 3,
          "action": "Scale deployment if needed",
          "command": "kubectl scale deployment web-app-deployment --replicas=5",
          "expected_result": "Additional pods should start"
        },
        {
          "step": 4,
          "action": "Verify load balancer",
          "command": "kubectl get svc web-app-service",
          "expected_result": "External IP should be assigned"
        },
        {
          "step": 5,
          "action": "Test service endpoints",
          "command": "curl http://<external-ip>/health",
          "expected_result": "Should return 200 OK"
        }
      ],
      "rollback_procedure": {
        "trigger": "If recovery fails after 30 minutes",
        "steps": [
          "1. Get previous deployment revision: kubectl rollout history deployment/web-app-deployment",
          "2. Rollback to previous version: kubectl rollout undo deployment/web-app-deployment",
          "3. Monitor rollback status: kubectl rollout status deployment/web-app-deployment",
          "4. Verify service health after rollback"
        ]
      }
    },
    {
      "id": "database-recovery",
      "service": "database",
      "recovery_steps": [
        {
          "step": 1,
          "action": "Check database pod status",
          "command": "kubectl get pods -l app=database",
          "expected_result": "Pod should be running"
        },
        {
          "step": 2,
          "action": "Verify persistent volume",
          "command": "kubectl get pv,pvc -n production",
          "expected_result": "PVC should be bound"
        },
        {
          "step": 3,
          "action": "Check database logs",
          "command": "kubectl logs -f database-pod-name",
          "expected_result": "No critical errors"
        },
        {
          "step": 4,
          "action": "Test database connectivity",
          "command": "kubectl exec -it database-pod -- psql -U postgres -c 'SELECT 1'",
          "expected_result": "Query should return successfully"
        },
        {
          "step": 5,
          "action": "Verify replication if applicable",
          "command": "kubectl exec -it database-pod -- psql -U postgres -c 'SELECT * FROM pg_stat_replication'",
          "expected_result": "Replicas should be connected"
        }
      ],
      "data_recovery": {
        "backup_location": "s3://backup-bucket/database/",
        "restore_procedure": [
          "1. Stop application writes",
          "2. Create new database pod with empty volume",
          "3. Restore from latest backup: pg_restore -d dbname backup.dump",
          "4. Verify data integrity",
          "5. Resume application traffic"
        ]
      }
    },
    {
      "id": "full-stack-recovery",
      "title": "Complete Stack Recovery",
      "priority_order": [
        "database",
        "cache-service",
        "api-service",
        "web-service",
        "ingress-controller"
      ],
      "pre_recovery_checks": [
        "Verify cluster health: kubectl get nodes",
        "Check resource availability: kubectl top nodes",
        "Review recent events: kubectl get events --sort-by=.metadata.creationTimestamp"
      ],
      "recovery_phases": [
        {
          "phase": "Infrastructure",
          "steps": [
            "Verify node health",
            "Check network connectivity",
            "Ensure storage availability"
          ]
        },
        {
          "phase": "Data Layer",
          "steps": [
            "Recover database services",
            "Verify data integrity",
            "Restore cache if needed"
          ]
        },
        {
          "phase": "Application Layer",
          "steps": [
            "Start backend services",
            "Verify service discovery",
            "Start frontend services"
          ]
        },
        {
          "phase": "Validation",
          "steps": [
            "Run health checks",
            "Perform smoke tests",
            "Monitor metrics"
          ]
        }
      ]
    },
    {
      "id": "product-catalog-service-recovery",
      "service": "product-catalog-service",
      "recovery_steps": [
        {
          "step": 1,
          "action": "Check service health status",
          "command": "kubectl get pods -l app=product-catalog-service",
          "expected_result": "All pods should be in Running state with 2/2 ready"
        },
        {
          "step": 2,
          "action": "Verify service endpoints",
          "command": "kubectl get svc product-catalog-service",
          "expected_result": "Service should show active endpoints"
        },
        {
          "step": 3,
          "action": "Check application logs",
          "command": "kubectl logs -l app=product-catalog-service --tail=100",
          "expected_result": "No error messages, healthy operation logs"
        },
        {
          "step": 4,
          "action": "Test health endpoint",
          "command": "kubectl exec -it <pod-name> -- curl localhost:8080/health",
          "expected_result": "Should return 200 OK with healthy status"
        },
        {
          "step": 5,
          "action": "Verify cache connectivity",
          "command": "kubectl exec -it <pod-name> -- curl localhost:8080/internal/cache/status",
          "expected_result": "Cache should be connected with high hit rate"
        },
        {
          "step": 6,
          "action": "Test product search functionality",
          "command": "kubectl exec -it <pod-name> -- curl 'localhost:8080/products/search?q=test'",
          "expected_result": "Should return product results within 50ms"
        }
      ],
      "performance_optimization": {
        "trigger": "If response times exceed 100ms",
        "steps": [
          "1. Check cache hit rates: Monitor Redis cluster performance",
          "2. Review database query performance",
          "3. Scale pods if CPU > 70%: kubectl scale deployment product-catalog-service --replicas=4",
          "4. Enable query caching for frequent searches",
          "5. Warm up product index if cold start detected"
        ]
      },
      "scaling_guidelines": {
        "auto_scaling": {
          "min_replicas": 2,
          "max_replicas": 10,
          "target_cpu": "70%",
          "target_memory": "80%"
        },
        "manual_scaling": {
          "peak_hours": "Scale to 6 replicas during 9AM-6PM",
          "promotional_events": "Scale to 10 replicas during flash sales",
          "maintenance": "Scale to minimum 3 replicas during deployment"
        }
      }
    }
  ]
}